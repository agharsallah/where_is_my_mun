import React, { Component } from 'react';
import { Map, Popup, TileLayer, GeoJSON, FeatureGroup, Tooltip,LayersControl } from 'react-leaflet';
import axios from 'axios' ;
import IrieMarker from './IrieMarker' ; 
import config from '../config'
import Control from 'react-leaflet-control';
import MapKey from './MapKey' ;
import MapInfo from './MapInfo' ;
import { connect } from "react-redux";
import { getPopValue } from "../actions/index";
import { bindActionCreators } from "redux";
import "./s.css"
class StatMap extends Component {
    constructor(props){
        super(props);
        this.state={
            feature:"",shape:g_mun_shapes,key:1,Irie:[],seats:"" ,population:"" ,
            etat:"" ,gouv_name:"",destroy:true,grades:["New","Extended","Old"],
            keytitle:"Municipality color Representation",colorfun:this.getColor,
            allpop:0,allarea:0
        }
    }
    
    componentWillMount() {
        let qString=config.apiUrl+"/api/shape/AllShapesOld";
        axios({
            method: 'get',
            url: qString,
            headers: {
                'name': 'Isie',
                'password': 'Isie@ndDi'
            }
        })
        .then(response=>{
            //console.log(response.data.data)
            console.log('we got shape data frm db');
            console.log(response);
            this.setState({shape:JSON.parse(response.data.data),key:2});
            }
        )
        .catch(function (error) {
            console.log(error);
        });

        let qString2=config.apiUrl+"/api/iries/";
            axios({
                method: 'get',
                url: qString2,
                headers: {
                    'name': 'Isie',
                    'password': 'Isie@ndDi'
                }
            })
        .then(response=>{
            console.log('we got polling data frm db');
            this.setState({Irie:response.data});
            }
        )
        .catch(function (error) {
            console.log(error);
        });
    
    }

     getColor(d,c1) {
        if      (d >2)      {return "#f0f0ee"; }
        else if (d >1)      {return "#f0f0ee";}
        else if (isNaN(d))    {return ('#f0f0ee')}
        else                  {return "#f0f0ee";}
	}
         getColorc(d,c1) {
        if      (d >2)      {return (c1[2]); }
        else if (d >1)      {return (c1[1]);}
        else if (isNaN(d))    {return ('rgb(187, 222, 251)')}
        else                  {return (c1[0]);}
	}

    style(feature) {
        //check for what we have checked as filter subject : Population || state ||
            const etat = this.props.stateFilter;
            if(etat=="All") {
                if(feature.properties.state=="extended"){
                    var ETAT = 1;
                }else if(feature.properties.state=="new"||feature.properties.state=="new2015"){
                    var ETAT = 2;
                }else{
                    var ETAT = 3;
                }
            }
            if ((feature.properties.state=="extended")&&(etat=="Extended")){
                var ETAT = 1;
            }else if ((feature.properties.state=="new"||feature.properties.state=="new2015")&&(etat=="New")){
                var ETAT = 2;
            }else if ((feature.properties.state=="old")&&(etat=="Old")){
                var ETAT = 3;
            }
           
            return {
                fillColor: this.getColor(ETAT,this.props.mapColorState),
                color: 'black',
                weight: 0.5,
                fillOpacity: 0.8
            };
	}
    
     styleB(feature) {

            return {
                
                color: 'black',
                weight: 3,
                fillOpacity: 0
            };
	}
         styleBG(feature) {

            return {
                
                color: 'black',
                weight: 3,
                fillOpacity: 0
            };
	}
    stylef(feature){
         const etat = this.props.stateFilter;
            if(etat=="All") {
                if(feature.properties.state=="extended"){
                    var ETAT = 1;
                }else if(feature.properties.state=="new"||feature.properties.state=="new2015"){
                    var ETAT = 2;
                }else{
                    var ETAT = 3;
                }
            }
            if ((feature.properties.state=="extended")&&(etat=="Extended")){
                var ETAT = 1;
            }else if ((feature.properties.state=="new"||feature.properties.state=="new2015")&&(etat=="New")){
                var ETAT = 2;
            }else if ((feature.properties.state=="old")&&(etat=="Old")){
                var ETAT = 3;
            }
            return {
                fillColor: this.getColorc(ETAT,this.props.mapColorState),
                color: 'black',
                weight: 0.5,
                fillOpacity: 0.8
            };
    }

    highlightFeature(e) {
	    const layer = e.target;
        const property = layer.feature.properties;
     this.setState({destroy:false,seats:property.chair,population:property.POP,etat:property.etat,gouv_name:property.LABEL});
    return layer.setStyle( {
        weight: 2,
        color: '#666',
        dashArray: '',
        fillOpacity: 0.7
    });
	}
    resetFeature(e) {
	    var layer = e.target;
	     layer.setStyle({
	        weight: 5
	    });
                this.setState({destroy:true});
	}

    render() {
        const position = [34.855360, 8.8049795];
        return (
            
                <Map  maxZoom={23} center={position} zoom={7} className="initialposition" style={{height: "100vh", width: "100vw",position:"relative",zIndex:0}}>
                    <TileLayer
                    url='https://api.mapbox.com/styles/v1/hunter-x/cixhpey8700q12pnwg584603g/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiaHVudGVyLXgiLCJhIjoiY2l2OXhqMHJrMDAxcDJ1cGd5YzM2bHlydSJ9.jJxP2PKCIUrgdIXjf-RzlA'
                    attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
                    />
 
                    <GeoJSON
                    data= {shape}
                    style={this.style.bind(this)} 
                    onEachFeature={
                        (feature, layer) => {
                            layer.bindTooltip(feature.properties.LABEL,{ permanent: false,className:"tooltipnamear",direction:"center" })
                            layer.on({mouseover: this.highlightFeature.bind(this)});
                            layer.on({mouseout: this.resetFeature.bind(this)});   
                    }    
                    }
                    />
                     <GeoJSON
                    data= {focus}
                    style={this.stylef.bind(this)} 
 
                 
                    /> 

                     <GeoJSON
                    data= {focusGouv}
                    style={this.styleBG.bind(this)} 

                    /> 
                    
                    <Control position="topright" >
             <div className="infoLegendStat legend">
             <div>
                        <h3 >6 Governorates :</h3>
                        <h4 style={{textAlign:"center",marginTop:"20px",color:"#30729c"}}>Jendouba</h4>
                        <h4 style={{textAlign:"center",marginTop:"20px",color:"#30729c"}}>Le Kef</h4>
                        <h4 style={{textAlign:"center",marginTop:"20px",color:"#30729c"}}>Siliana</h4>
                        <h4 style={{textAlign:"center",marginTop:"20px",color:"#30729c"}}>Kasserine</h4>
                        <h4 style={{textAlign:"center",marginTop:"20px",color:"#30729c"}}>Sidi Bouzid</h4>
                        <h4 style={{textAlign:"center",marginTop:"20px",color:"#30729c"}}>Gafsa</h4>
         <h3 style={{marginTop:"30px"}}>27 new municipality</h3>
                        </div>
                    </div>
                    </Control>
                    <h2 style={{textShadow: "4px 3px 3px rgba(150, 150, 184, 0.48)",position:"relative",zIndex:"500",marginLeft:"40%",width:"38%",borderRadius: "80px", top: -"1vh",textAlign:"center", fontFamily: "Lucida Grande",color: "rgb(0, 82, 136)"}}>Governorates & Municipalities targeted for Civic engagement campaign</h2>
                    {/*show the information Div*/}
                    {(this.state.destroy==false)?<div className="one">{this.state.population}</div>: <div>aaaaa</div> }
                </Map>

        );
    }
}

function mapStateToProps(state) {
  // Whatever is returned will show up as props
  // inside of StatMap
  console.log("youhoooo",state.changeMapColorState);
  return {
    checkedIrieButton:state.irieCheckbox,
    mapColorState:state.changeMapColorState,

    stateFilter:state.stateFilter,

  };
}

// Promote BookList from a component to a container - it needs to know
// about this new dispatch method, selectBook. Make it available
// as a prop.
export default connect(mapStateToProps)(StatMap);

